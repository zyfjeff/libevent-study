//关于日志级别的一些定义
#define EVENT_LOG_DEBUG 0                                                                  
#define EVENT_LOG_MSG    1                                                                  
#define EVENT_LOG_WARN   2                                                                  
#define EVENT_LOG_ERR    3
                                                                                          
/* Deprecated; see note at the end of this section */
#define _EVENT_LOG_DEBUG EVENT_LOG_DEBUG                                                  
#define _EVENT_LOG_MSG    EVENT_LOG_MSG                                                    
#define _EVENT_LOG_WARN   EVENT_LOG_WARN                                                   
#define _EVENT_LOG_ERR    EVENT_LOG_ERR

//可以定义自己的日志函数来代替libevent内部默认的日志处理函数 但是最好不要这么做
//日志处理函数的声明形式要像如下形式
typedef void (*event_log_cb)(int severity, const char *msg);

//设置自己的日志处理函数为libevent内部的日志处理函数
void event_set_log_callback(event_log_cb cb);

//libevent默认处理致命错误的方式是调用exit或者是abort 让程序终止
//我们也可以调用自定义的错误处理函数

//自定义错误处理函数的原型
typedef void (*event_fatal_cb)(int err);
//设置自定义处理函数
void event_set_fatal_callback(event_fatal_cb cb);


//libevent默认使用malloc remalloc free 等内存管理函数
//可以使用下面这个函数设置自己的内存管理函数
void event_set_mem_functions( vo id *(*malloc_fn)( si ze_ t
sz),void *(*realloc_fn)( v oid *ptr, s iz e_ t
sz),void (*free_fn)( v oi d *ptr));


//检测libevent的版本
//返回字符串形式的版本
const char *event_get_version(void);
//返回数字形式的版本                                  
ev_uint32_t event_get_version_number(void);

//编译的时候就确定的数字形式的版本号
LIBEVENT_VERSION_NUMBER

//创建一个event_base 这个结构体持有一个事件集合
struct event_base *event_base_new(void);

//销毁event_base
vo id event_base_free( st ru ct event_base *base);

//为事件设置多个优先级
int event_base_priority_init(struct event_base *base, int n_priorities);


//多进程中需要在子进程中对其重新初始化
int event_reinit( struct event_base *base);

//创建配置选项
struct event_config *event_config_new(void);

//对event_base进行配置
struct event_base *event_base_new_with_config(const struct event_config *cfg);

//释放配置选项
void event_config_free(struct event_config *cfg);

//设置可以使用哪种IO模型,select,epoll,....
int event_config_avoid_method(struct event_config *cfg, const char *method);

//设置具有这些特性的IO模型为后端
enum event_method_feature {                                                               
     EV_FEATURE_ET = 0x01, //边缘触发 ,默认都是水平触发                               
     EV_FEATURE_O1 = 0x02, //O(1)复杂度                                                       
     EV_FEATURE_FDS = 0x04,//支持任意描述符                                                    
};
int event_config_require_features(struct event_config *cfg,enum event_method_feature feature);  

//检查后端支持哪些IO模型
const char **event_get_supported_methods(void);

//返回event_base正在使用的IO模型
const char *event_base_get_method(const struct event_base *base); 

//返回event_base正在使用的IO模型所支持的特性
enum event_method_feature event_base_get_features(const struct event_base *base);

//进入事件循环，等待事件并且通知事件发生
int event_base_loop( struct event_base *base, int flags);

//flags可选值
#define EVLOOP_ONCE              0x01  //只循环一次                                                      
#define EVLOOP_NONBLOCK          0x02  //非阻塞的循环                                             
#define EVLOOP_NO_EXIT_ON_EMPTY 0x04  //在事件集为空的时候不退出循环


//event_base_loop的简化版本，不带flag参数的
//一致循环运行，直到没有事件注册，或是调用了event_base_loopbreak()或者event_base_loopexit()为止
int event_base_dispatch(struct event_base *base);


//退出循环,在给定时间之后退出循环
int event_base_loopexit( struct event_base *base,const struct timeval *tv);               

//和event_base_loopexit不同的是如果event_base当前正在执行激活事件的回调，它将在执行完当前正在处理的事件后立即
退出
int event_base_loopbreak(struct event_base *base);

//判断是哪种退出
//这两个函数分别会在循环是因为调用event_base_loopexit（）或者event_base_break（）而退出的时候返回true，否则返回false.
int event_base_got_exit(struct event_base*base);  
int event_base_got_break(struct event_base *base);

//调试用,打印事件状态列表
void event_base_dump_events( struct event_base *base, FILE *f);


//创建 销毁事件 和回调函数
#define EV_TIMEOUT       0x01                                                       
#define EV_READ          0x02                                                        
#define EV_WRITE         0x04                                                        
#define EV_SIGNAL        0x08                                                        
#define EV_PERSIST       0x10                                                        
#define EV_ET            0x20                                                        

//回调函数的函数原型声明                         
typedef void (*event_callback_fn)(evutil_socket_t, short, void *);

//创建任意类型的事件 what就是上述的事件类型
struct event *event_new(struct event_base *base, evutil_socket_t fd,short what, event_callback_fn cb,void *arg);         

//销毁事件
void event_free(struct event *event);

//所有新创建的事件都处于已初始化和非未决状态，调用event_add（）可以使其成为未决的

//创建超时事件,不需要fd,设置fd为-1即可
#define evtimer_new(base, callback, arg) event_new((base),  ‐1, 0, (callback),(arg))                                    #define evtimer_add(ev, tv) event_add((ev),(tv))                                                       
#define evtimer_del(ev) event_del(ev)                                                       
#define evtimer_pending(ev, what, tv_out) event_pending((ev), (what), (tv_out))

//创建信号事件
#define evsignal_new(base, signum, callback, arg) event_new(base, signum, EV_SIGNAL|EV_PERSIST, cb, arg)


//在栈上分配，或者静态分配
int event_assign(struct event *event,struct event_base *base,evutil_socket_t fd, short what,void (*callback)(evutil_socket_t,short, void *), void *arg);

//返回event结构体保留的字节数
size _t event_get_struct_event_size(void);

//将创建的事件变成为未决的
int event_add(struct event *ev, const struct timeval *tv);

//对已经初始化的事件调用，使其变成非未决的和非激活的
int event_del( struct event *ev);

//多个事件同时触发时，libevent没有定义各个回调的执行次序。可以使用优先级来定义某些事件比
其他事件更重要
int event_priority_set(struct event *event, in t priority);

//设置公用超时值
const struct timeval *event_base_init_common_timeout(struct event_base *base, const struct timeval *duration);

//设置fd为非阻塞 =>O_NONBLOCK
int evutil_make_socket_nonblocking(evutil_socket_t sock);

//设置套接字可重用选项 => SO_REUSEADDR
int evutil_make_listen_socket_reuseable(evutil_socket_t sock);

//调用exec关闭fd =>FD_CLOEXEC
int evutil_make_socket_closeonexec(evutil_socket_t sock);

//套接字缓冲区
struct bufferevent *bufferevent_socket_new(srruct event_base *base,evutil_socket_t fd,enum bufferevent_options options);

//bufferevent_socket_new 基于主机名创建基于套接字缓冲区
int bufferevent_socket_connect_hostname(struct bufferevent *bev,struct evdns_base *dns_base, int family, const char*hostname,int port);

int bufferevent_socket_get_dns_error(struct bufferevent *bev);


